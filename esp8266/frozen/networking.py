# This file is executed on every boot (including wake-boot from deepsleep)from network_manager import NetworkManagerimport webreplimport networkimport sysimport jsonhandlingimport machine, time, uosimport gc# Funktion, die mithilfe einer device_config.json die Netzwerkinitialisierung startet.def initialise():    config = jsonhandling.read()    device_id = jsonhandling.read_key(config, 'name')    webrepl_password = jsonhandling.read_key(config, 'webrepl_password')    ap_mode_password = jsonhandling.read_key(config, 'ap_mode_password')    wireless_config = []    wireless_config.append(jsonhandling.read_key(config, 'wireless_config', 'SSID'))    wireless_config.append(jsonhandling.read_key(config, 'wireless_config', 'password'))    mqtt_settings = []    mqtt_settings.append(jsonhandling.read_key(config, 'mqtt_settings', 'mqtt_server'))    mqtt_settings.append(jsonhandling.read_key(config, 'mqtt_settings', 'mqtt_port'))    mqtt_settings.append(jsonhandling.read_key(config, 'mqtt_settings', 'keep_alive'))        if device_id == False:        print('[ERROR] Name wird benötigt! Bitte überprüfe die JSON')        sys.exit()        if any(x is False for x in wireless_config and mqtt_settings):        print('[ERROR] MQTT- oder WLAN-Zugangsdaten konnten nicht gelesen werden')        sys.exit()            else:        # Prüfen auf Default Hostname in device_config        if device_id == 'wemos9999':            print('[INFO] Standard-Geräte-ID nicht verändert. Bitte eindeutige Geräte-ID im NetworkManager vergeben.')        # Starte NetworkManager mit Hostname als AP SSID und ap_mode_password als AP Passwort        if ap_mode_password == False:            # Sollte ap_mode_password aus JSON nicht lesbar sein, Fallback auf 12345678 als AP Passwort            print('[INFO] Starte Konfigurationsportal mit SSID:', device_id, 'und Passwort: 12345678')            # Args: Geräte-ID, AP Passwort, WLAN-Zugangsdaten, MQTT-Zugangsdaten            network_manager = NetworkManager(device_id, '12345678', wireless_config, mqtt_settings)        else:            print('[INFO] Starte Konfigurationsportal mit SSID:', device_id, 'und Passwort:', ap_mode_password)            # Args: Geräte-ID, AP Passwort, WLAN-Zugangsdaten, MQTT-Zugangsdaten            network_manager = NetworkManager(device_id, ap_mode_password, wireless_config, mqtt_settings)                # Handling innerhalb der Klasse. Loopt solange im AP-Modus, bis erfolgreiche Verbindung mit dem Netzwerk hergestellt werden konnte.        if (network_manager.connect() == True and webrepl_password == False):            print('[INFO] WebREPL Passwort lässt sich nicht auslesen. Fallback auf Geräte-ID.')            webrepl.start(password= device_id)            return network_manager        else:            print('[INFO] WebREPL Daemon wird mit Passwort:', webrepl_password, 'gestartet.')            webrepl.start(password= webrepl_password)            return network_manager        